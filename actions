#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

PRIMARY='\033[0;32m';
DANGER='\033[0;31m';
NC='\033[0m';

# Log functions

log() {
  echo -e "${1}";
}

log_info() {
  echo -e "${PRIMARY}[info]${NC} ${1}";
}

log_error() {
  echo -e "${DANGER}[error]${NC} ${1}";
}

# Download functions

download_wget() {
  URL=$1; shift;
  OUTPUT=$1; shift;

  wget -O$OUTPUT $URL;
  if [[ "$?" -ne "0" ]];
  then
    log_error "Unable to download ${URL} to ${OUTPUT} ${?}";
    exit 1;
  fi
}

download_curl() {
  URL=$1; shift;
  OUTPUT=$1; shift;

  curl $URL -L --output $OUTPUT;
  if [[ "$?" -ne "0" ]];
  then
    log_error "Unable to download ${URL} to ${OUTPUT}";
    exit 1;
  fi
}

download() {
  mkdir -p "${SCRIPT_DIR}/.tools";

  which wget > /dev/null;
  if [[ "$?" -eq "0" ]];
  then
    download_wget $@;
  else
    which curl > /dev/null;
    if [[ "$?" -eq "0" ]];
    then
      download_curl $@;
    else
      log_error "Please install cURL or wget";
      exit 1;
    fi
  fi
}

# Ensure functions - Make sure that a program is present

JQ_PATH="jq";
ensure_jq() {
  export PATH="${SCRIPT_DIR}/.tools:${PATH}";
  which $JQ_PATH > /dev/null;
  if [[ "$?" -ne "0" ]];
  then
    export JQ_PATH="${SCRIPT_DIR}/.tools/jq";
    which $JQ_PATH > /dev/null;

    if [[ "$?" -ne "0" ]];
    then
      log_info "Downloading jq";

      if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        download 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64' $JQ_PATH;
        chmod +x $JQ_PATH;
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        download 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64' $JQ_PATH;
        chmod +x $JQ_PATH;
      else
        log_error "Unsupported Operating System: ${OSTYPE}";
        exit 1;
      fi
    fi
  fi

  JQ_VERSION=$(jq --version);
  log_info "Using jq ${JQ_VERSION} ($(which jq))";
}

DOTNET_PATH="dotnet";
ensure_dotnet() {
  ensure_jq;
  export PATH="${SCRIPT_DIR}/.tools/.dotnet:${PATH}";
  DOTNET_VERSION=$(cat "${SCRIPT_DIR}/global.json" | jq '.sdk.version' -r);

  which $DOTNET_PATH > /dev/null;
  EXIT_CODE=$?;
  if [[ "$EXIT_CODE" -eq "0" ]];
  then
    $DOTNET_PATH --list-sdks | grep $DOTNET_VERSION > /dev/null;
    EXIT_CODE=$?;
    if [[ "$EXIT_CODE" -ne "0" ]];
    then
      log_info "Unable to find dotnet sdk ${DOTNET_VERSION} using $(which dotnet)";
    fi
  fi

  if [[ "$EXIT_CODE" -ne "0" ]];
  then
    export DOTNET_PATH="${SCRIPT_DIR}/.tools/.dotnet/dotnet";
    which $DOTNET_PATH > /dev/null;
    if [[ "$?" -ne "0" ]];
    then
      log_info "Downloading dotnet sdk ${DOTNET_VERSION}";

      DOTNET_INSTALLER_PATH="${SCRIPT_DIR}/.tools/dotnet-installer.sh";
      download 'https://dotnet.microsoft.com/download/dotnet-core/scripts/v1/dotnet-install.sh' $DOTNET_INSTALLER_PATH;
      chmod +x $DOTNET_INSTALLER_PATH;

      $DOTNET_INSTALLER_PATH --install-dir "${SCRIPT_DIR}/.tools/.dotnet" --version $DOTNET_VERSION;
    fi
  fi

  log_info "Using dotnet ${DOTNET_VERSION} ($(which dotnet))";
}

ensure_reportgenerator() {
  ensure_dotnet;

  export PATH="${SCRIPT_DIR}/.tools:${PATH}";
  which reportgenerator > /dev/null;
  if [[ "$?" -ne "0" ]];
  then
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
    if [[ "$?" -ne "0" ]];
    then
      dotnet tool uninstall dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
    fi
  fi
}

# Action functions - these are exposed for calling

action_help() {
  echo 'Usage: actions [command] [arguments]';
  echo '';
  echo 'Execute an action for the project. Most commands pass additional arguments onto subsequent dotnet call.';
  echo '';
  echo 'Commands:';
  echo '  benchmark       Run the benchmark project.';
  echo '  build           Build the solution.';
  echo '  code_coverage   Convert the code coverage output into reports.';
  echo '  env             Set the environment file for GitHub Actions.';
  echo '  pack            Pack the artifacts into nupkg.';
  echo '  nuget           Publish nupkgs to NuGet.org.';
  echo '  restore         Restore package references for the solution.';
  echo '  sample          Run the README sample project.';
  echo '  test            Test the build artifacts.';
}

action_restore() {
  ensure_dotnet;
  log_info "dotnet restore $*";
  dotnet restore $@;
}

action_build() {
  ensure_dotnet;
  log_info "dotnet build $*";
  dotnet build $@;
}

action_test() {
  ensure_dotnet;
  log_info "dotnet test $*";
  dotnet test $@;
}

action_code_coverage() {
  ensure_reportgenerator;
  REPORT_TYPES="Cobertura;Html";
  REPORT_FILE="tests/Jsonificate.Tests/coverage.cobertura.xml";
  [[ -f $REPORT_FILE ]] || action_test;

  log_info "reportgenerator -reports:$REPORT_FILE -targetdir:artifacts/code-coverage -reporttypes:$REPORT_TYPES";
  reportgenerator -reports:$REPORT_FILE -targetdir:artifacts/code-coverage -reporttypes:$REPORT_TYPES;
}

action_benchmark() {
  ensure_dotnet;
  BENCHMARK_FILE='benchmarks/Jsonificate.Benchmarks/bin/Release/net5.0/Jsonificate.Benchmarks.dll';
  [[ -f $BENCHMARK_FILE ]] || action_build --configuration Release;

  log_info "dotnet $BENCHMARK_FILE";
  dotnet $BENCHMARK_FILE;
}

action_pack() {
  ensure_dotnet;
  log_info "dotnet pack $* --include-symbols --include-source src/Jsonificate/Jsonificate.csproj";
  dotnet pack $@ --include-symbols --include-source src/Jsonificate/Jsonificate.csproj;
}

action_sample() {
  ensure_dotnet;
  log_info "dotnet run $* --project samples/ReadmeSamples/ReadmeSamples.csproj";
  dotnet run $@ --project samples/ReadmeSamples/ReadmeSamples.csproj;
}

action_nuget() {
  ensure_dotnet;

  NUPKG_PATTERN=$1; shift;
  API_URL=$1; shift;
  API_KEY=$1; shift;
  dotnet nuget push "src/Jsonificate/bin/Release/${NUPKG_PATTERN}" --api-key $API_KEY --source $API_URL;
}

action_env() {
  ENV_FILE=$1; shift;
  GIT_REF=$1; shift;
  GIT_SHA=$1; shift;

  if [[ $GIT_REF == refs/tags/v* ]];
  then
    VERSION=$(echo $GIT_REF | cut -c12-);
    log_info "Using version ${VERSION}";
    echo "EXTRA_ARGS=/p:Version=${VERSION}" >> $ENV_FILE;
    echo "NUPKG_PATTERN=Jsonificate.${VERSION}.nupkg" >> $ENV_FILE;
  else
    VERSION_SUFFIX=$(echo $GIT_SHA | cut -c 1-6);
    log_info "Using version suffix ${VERSION_SUFFIX}";
    echo "EXTRA_ARGS=/p:VersionSuffix=${VERSION_SUFFIX}" >> $ENV_FILE;
    echo "NUPKG_PATTERN=Jsonificate.*-${VERSION_SUFFIX}.nupkg" >> $ENV_FILE;
  fi
}

# Main function

ACTION="action_${1}";
shift;

type $ACTION &>/dev/null
if [[ "$?" -eq "0" ]];
then
  $ACTION $@
else
  action_help
fi
