#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

PRIMARY='\033[0;32m';
DANGER='\033[0;31m';
NC='\033[0m';

# Log functions

log() {
  echo -e "${1}";
}

log_info() {
  echo -e "${PRIMARY}[info]${NC} ${1}";
}

log_error() {
  echo -e "${DANGER}[error]${NC} ${1}";
}

# Download functions

download_wget() {
  URL=$1; shift;
  OUTPUT=$1; shift;

  wget -O$OUTPUT $URL;
  if [[ "$?" -ne "0" ]];
  then
    log_error "Unable to download ${URL} to ${OUTPUT} ${?}";
    exit 1;
  fi
}

download_curl() {
  URL=$1; shift;
  OUTPUT=$1; shift;

  curl $URL -L --output $OUTPUT;
  if [[ "$?" -ne "0" ]];
  then
    log_error "Unable to download ${URL} to ${OUTPUT}";
    exit 1;
  fi
}

download() {
  mkdir -p "${SCRIPT_DIR}/.tools";

  which wget > /dev/null;
  if [[ "$?" -eq "0" ]];
  then
    download_wget $@;
  else
    which curl > /dev/null;
    if [[ "$?" -eq "0" ]];
    then
      download_curl $@;
    else
      log_error "Please install cURL or wget";
      exit 1;
    fi
  fi
}

# Ensure functions - Make sure that a program is present

JQ_PATH="jq";
ensure_jq() {
  export PATH="${SCRIPT_DIR}/.tools:${PATH}";
  which $JQ_PATH > /dev/null;
  if [[ "$?" -ne "0" ]];
  then
    export JQ_PATH="${SCRIPT_DIR}/.tools/jq";
    which $JQ_PATH > /dev/null;

    if [[ "$?" -ne "0" ]];
    then
      log_info "Downloading jq";

      if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        download 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64' $JQ_PATH;
        chmod +x $JQ_PATH;
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        download 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64' $JQ_PATH;
        chmod +x $JQ_PATH;
      else
        log_error "Unsupported Operating System: ${OSTYPE}";
        exit 1;
      fi
    fi
  fi

  JQ_VERSION=$(jq --version);
  log_info "Using jq ${JQ_VERSION} ($(which jq))";
}

DOTNET_PATH="dotnet";
ensure_dotnet() {
  ensure_jq;
  export PATH="${SCRIPT_DIR}/.tools/.dotnet:${PATH}";
  DOTNET_VERSION=$(cat "${SCRIPT_DIR}/global.json" | jq '.sdk.version' -r);

  which $DOTNET_PATH > /dev/null;
  EXIT_CODE=$?;
  if [[ "$EXIT_CODE" -eq "0" ]];
  then
    $DOTNET_PATH --list-sdks | grep $DOTNET_VERSION > /dev/null;
    EXIT_CODE=$?;
    if [[ "$EXIT_CODE" -ne "0" ]];
    then
      log_info "Unable to find dotnet sdk ${DOTNET_VERSION} using $(which dotnet)";
    fi
  fi

  if [[ "$EXIT_CODE" -ne "0" ]];
  then
    export DOTNET_PATH="${SCRIPT_DIR}/.tools/.dotnet/dotnet";
    which $DOTNET_PATH > /dev/null;
    if [[ "$?" -ne "0" ]];
    then
      log_info "Downloading dotnet sdk ${DOTNET_VERSION}";

      DOTNET_INSTALLER_PATH="${SCRIPT_DIR}/.tools/dotnet-installer.sh";
      download 'https://dotnet.microsoft.com/download/dotnet-core/scripts/v1/dotnet-install.sh' $DOTNET_INSTALLER_PATH;
      chmod +x $DOTNET_INSTALLER_PATH;

      $DOTNET_INSTALLER_PATH --install-dir "${SCRIPT_DIR}/.tools/.dotnet" --version $DOTNET_VERSION;
    fi
  fi

  log_info "Using dotnet ${DOTNET_VERSION} ($(which dotnet))";
}

ensure_reportgenerator() {
  ensure_dotnet;

  export PATH="${SCRIPT_DIR}/.tools:${PATH}";
  which reportgenerator > /dev/null;
  if [[ "$?" -ne "0" ]];
  then
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
    if [[ "$?" -ne "0" ]];
    then
      dotnet tool uninstall dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path "${SCRIPT_DIR}/.tools";
    fi
  fi
}

# Action functions - these are exposed for calling

action_help() {
  echo 'TODO - Look at source, or .github/workflows/dotnet.yml for example';
}

action_restore() {
  ensure_dotnet;
  dotnet restore $@;
}

action_build() {
  ensure_dotnet;
  dotnet build $@;
}

action_test() {
  ensure_dotnet;
  dotnet test $@;
}

action_code_coverage() {
  ensure_reportgenerator;
  REPORT_TYPES="Cobertura;Html";
  reportgenerator -reports:tests/Jsonificate.Tests/coverage.cobertura.xml -targetdir:artifacts/code-coverage -reporttypes:$REPORT_TYPES;
}

action_benchmark() {
  ensure_dotnet;
  dotnet benchmarks/Jsonificate.Benchmarks/bin/Release/net5.0/Jsonificate.Benchmarks.dll;
}

action_pack() {
  ensure_dotnet;
  dotnet pack $@ src/Jsonificate/Jsonificate.csproj;
}

# Main function

ACTION="action_${1}";
shift;

type $ACTION &>/dev/null
if [[ "$?" -eq "0" ]];
then
  $ACTION $@
else
  action_help
fi
